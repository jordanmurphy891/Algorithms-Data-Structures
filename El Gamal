package cs211;
/*
 * You know Alice's public key, hack out her private key. 
 * Use it to decrypt the message being sent to her by Bob.
 * Then output the message.
 * The first line is Alice's public key, three numbers, each separated by a space, representing p, g and g^x modp
 * The second line is Bob's message, two numbers, separated by a space, representing g^y modp and m.g^xy modp
 * Output the message, a number between 0 and p.
 */
import java.util.Scanner;
public class ElGamal {
	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
				
		//this is the public key
		long p = sc.nextLong();
		long g = sc.nextLong();
		long mod = sc.nextLong();

		//this is bobs cipher
		long c1 = sc.nextLong();
		long c2 = sc.nextLong();
		
		long usedX = 0;
		
		boolean stop= false;
		for(long x = 0 ; !stop ; x++) {
			if(mod == modPow(g ,x, p) ) {
				stop = true;
				usedX = x;
			}
		}
		long l1 = modPow(c1, p-1-usedX, p); // this uses c1^(p-1-x), we found x in the above loop
		
		long message = modMult(l1, c2, p);
		
		System.out.println(message);
	}
		
		public static long modPow(long number, long power, long modulus) 
	    {
			//raises a number to a power with the given modulus
			//when raising a number to a power, the number quickly becomes too large to handle
			//you need to multiply numbers in such a way that the result is consistently moduloed to keep it in the range
			//however you want the algorithm to work quickly - having a multiplication loop would result in an O(n) algorithm!
			//the trick is to use recursion - keep breaking the problem down into smaller pieces and use the modMult method to join them back together
	        if(power==0)
	        {
	            return 1;
	        }
	        else if (power%2==0)
	        {
	            //if even power -> 7^8 = 7^4 * 7^4
	            long halfpower=modPow(number, power/2, modulus);
	            return modMult(halfpower,halfpower,modulus);
	        }
	        else
	        {
	            //if odd power -> 7^7 = 7^3 * 7^3 * 7
	            long halfpower=modPow(number, power/2, modulus);
	            long firstbit = modMult(halfpower,halfpower,modulus);
	            return modMult(firstbit,number,modulus);
	        }
	    }
		
	    public static long modMult(long first, long second, long modulus)
	    {
			//multiplies the first number by the second number with the given modulus
			//a long can have a maximum of 19 digits. Therefore, if you're multiplying two ten digits numbers the usual way, things will go wrong
			//you need to multiply numbers in such a way that the result is consistently moduloed to keep it in the range
			//however you want the algorithm to work quickly - having an addition loop would result in an O(n) algorithm!
			//the trick is to use recursion - keep breaking down the multiplication into smaller pieces and mod each of the pieces individually
	        if(second==0)
	        {
	            return 0;
	        }
	        else if (second%2==0)
	        {
	            long half=modMult(first, second/2, modulus);
	            return (half+half)%modulus;
	        }
	        else
	        {
	            long half=modMult(first, second/2, modulus);
	            return (half+half+first)%modulus;
	        }
	    }

	
}
