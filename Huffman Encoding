/**
 * take in a string. its split up into individual characters. then put into a queue with the highest freq character coming first. the chars are then
 * sorted into a huffman tree and the word is then spelled back out with binary stuff. like where h is , its 101 with 1 being left and 0 being right
 * then, spell out the whole word in binary
 */
 
import java.util.*;
public class HuffmanEncoding {
    public static void main(String args[]) throws Exception {
        Scanner in = new Scanner(System.in);
        String sentence = in .nextLine();

        int[] array = new int[256]; //an array to store all the frequencies

        for (int i = 0; i < sentence.length(); i++) { //go through the sentence
            array[(int) sentence.charAt(i)]++; //increment the appropriate frequencies
        }

        PriorityQueue < Tree > PQ = new PriorityQueue < Tree > (); //make a priority queue to hold the forest of trees    

        for (int i = 0; i < array.length; i++) { //go through frequency array
            if (array[i] > 0) { //print out non-zero frequencies - cast to a char

                //FILL THIS IN:

                //MAKE THE FOREST OF TREES AND ADD THEM TO THE PQ

                
                //create a new Tree 
            	Tree myTree = new Tree();
            	
                //set the cumulative frequency of that Tree
            	myTree.frequency = array[i];
            	
                //insert the letter as the root node 
            	Node myNode = new Node(); //makes node
            	char c1 = (char)i; //turns c1 back into character
            	myNode.letter = c1; //this stores first letter in node
            	myTree.root = myNode; //this makes that node become the root of my tree
            	
            	myTree.root.smallestLetter = c1; //demonstrator told me this ~ setting c1 as the smallest letter
            	
                //add the Tree into the PQ
            	PQ.add(myTree);

            }
        }

        while (PQ.size() > 1) { //while there are two or more Trees left in the forest

            //FILL THIS IN:

            //IMPLEMENT THE HUFFMAN ALGORITHM

            //when you're making the new combined tree, don't forget to create a new root node (or else you'll get a null pointer exception)
            //make sure to set the smallestLetter of the new combined tree to what it should be
            //the first tree to come out of PQ goes on the left, the second on the right
        	Tree combinedTree = new Tree(); //making new tree
        	Node combinedNode = new Node(); //this makes new root node
        	
        	Tree biggest = PQ.peek(); //this gets the highest frequency char in the queue
        	PQ.poll(); //used Push but got error, found Poll online. this pushes biggest off, but not lost ~ stored in biggest
        	Tree secondBiggest = PQ.peek();
        	PQ.poll(); //pushes second biggest off and stored in secondBiggest
        	
        	//lets connect those two nodes
        	combinedNode.leftChild = biggest.root;
        	combinedNode.rightChild = secondBiggest.root;
        	
        	//lets add the freq of the two children and make the result the adults freq
        	combinedTree.frequency = (biggest.frequency + secondBiggest.frequency);
        	
        	//we must now compare the two chars of the children array
        	char smallestChild = (char)Math.min(biggest.root.smallestLetter, secondBiggest.root.smallestLetter); //this finds the min
        	combinedNode.smallestLetter = smallestChild; //this sets the smallest child to be the ovarall smallest
        	
        	combinedTree.root = combinedNode; //this makes the adult node into the new root
        	
        	//finally, lets add the combined tree back into the priority queue.
        	PQ.add(combinedTree);
        	
        }

        Tree HuffmanTree = PQ.poll(); //now there's only one tree left - get its codes
        
        //FILL THIS IN:

        //get all the codes for the letters and print them out
        for(int j = 0 ; j<sentence.length() ; j++)
        {
            //call the getCode() method on the HuffmanTree Tree object for each letter in the sentence
        	String binaryAnswer = HuffmanTree.getCode(sentence.charAt(j)); //getting binary code for each char
        	System.out.print(binaryAnswer);
        }

    }
}

class Node {


    public char letter = '@'; //stores letter
    public char smallestLetter = '@';  //a nice idea is to track the smallest letter in the tree in a special variable like this
				
    public Node leftChild; // this node's left child
    public Node rightChild; // this node's right child


} // end class Node





class Tree implements Comparable < Tree > {
    public Node root; // first node of tree
    public int frequency = 0;

    public Tree() // constructor
    {
        root = null;
    } // no nodes in tree yet

    //the PriorityQueue needs to be able to somehow rank the objects in it
    //thus, the objects in the PriorityQueue must implement an interface called Comparable
    //the interface requires you to write a compareTo() method so here it is:

    public int compareTo(Tree object) {
        if (frequency - object.frequency > 0) { //compare the cumulative frequencies of the tree
            return 1;
        } else if (frequency - object.frequency < 0) {
            return -1; //return 1 or -1 depending on whether these frequencies are bigger or smaller
        } else {
            // Sort based on letters
            char a = this.root.smallestLetter;
            char b = object.root.smallestLetter;

            if (a > b) {
                return 1;
            } else if (a < b) {
                return -1;
            }
            return 0;
        }
    }

    String path = "error"; //this variable will track the path to the letter we're looking for 

    public String getCode(char letter) { //we want the code for this letter

        return this._getCode(letter, this.root, ""); //return the path that results
    }

    private String _getCode(char letter, Node current, String path) {
        if (current == null) {
            return null;
        }
        if (current.letter == letter) {
            return path;
        }

        String leftPath = this._getCode(letter, current.leftChild, path + "0");
        if (leftPath != null) {
            return leftPath;
        }

        String rightPath = this._getCode(letter, current.rightChild, path + "1");
        return rightPath;
    }

} // end class Tree
