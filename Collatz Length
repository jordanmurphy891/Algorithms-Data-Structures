/**
 * Input : 4 9 3. this means sort the numbers 4 5 6 7 8 9 by their collatz length and output the 3rd number in the list. to find collatz length, get any
 * number. if even, divide it by 2. if odd, multiply it by 3 and add 1. the length is how many of these steps it takes to get to 1. will need a few 
 * methods, recursion and an nlogn algorithm. 
 */

import java.util.Scanner;
public class CollatzLength {
	public static void main (String args[]) {
		Scanner sc = new Scanner (System.in);
		int first = sc.nextInt();
		int last = sc.nextInt();
		int pos = sc.nextInt();
		
		//lets make an array for the numbers
		int [] myArray = new int [(last-first)+1];
		//lets fill the array
		for(int i = 0 ; i < myArray.length ; i++) {
			
			myArray[i] = first;
			first++;
		}
		
		//lets make a new array
		int [] collatzArray = new int [myArray.length];
		for(int i = 0 ; i < myArray.length ; i++) {
			collatzArray[i] = collatzLength(myArray[i]);
			//System.out.println(collatzArray[i]);
		}
		sort(collatzArray, myArray);
		
//		for(int i = 0 ; i < myArray.length ; i++) {
//		System.out.print(myArray[i]);
//		}
		System.out.print(myArray[pos-1]);
	}
	
	public static int collatzLength(int n) {
		int count = 0;
	      while (n != 1) 
	        { 
	            // If n is odd 
	            if (n%2 != 0) { 
	                n = (3 * n) + 1;
	                count++;
	            }
	            // If even 
	            else {
	                n = n / 2;
	                count++;
	            }
	        } 
	        return count;
	        
	}
	
	public static void sort(int[] collatzArray, int[] myArray) {
		//lets try bubble sort for now
		int temp1 = 0, temp2 = 0;
		for(int pass = 1; pass < collatzArray.length ; pass++)
		{
			for(int i = 0 ; i < collatzArray.length-1 ; i++)
			{
				if(collatzArray[i] > collatzArray[i+1])
				{
					temp1 = collatzArray[i];
					collatzArray[i] = collatzArray[i+1];
					collatzArray[i+1] = temp1;
					
					temp2 = myArray[i];
					myArray[i] = myArray[i+1];
					myArray[i+1] = temp2;
				}
			}
		}
	}

}
